{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ValueChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "store",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d2442ebbaf3943841b493783fbb77a362c3f8380f6e5bb5f395ce90d9f35686",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "209509",
    "logsBloom": "0x
    "blockHash": "0xed4034b1fc2bd78a1cd353040487ea6390c5aed7a439df4b5a3423246c04e065",
    "transactionHash": "0x8d2442ebbaf3943841b493783fbb77a362c3f8380f6e5bb5f395ce90d9f35686",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8,
        "transactionHash": "0x8d2442ebbaf3943841b493783fbb77a362c3f8380f6e5bb5f395ce90d9f35686",
        "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xed4034b1fc2bd78a1cd353040487ea6390c5aed7a439df4b5a3423246c04e065"
      }
    ],
    "blockNumber": 8,
    "cumulativeGasUsed": "209509",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "6a42469f905dc562d653fb0b96927fb4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ValueChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Box\\u5408\\u7ea6\\u7ee7\\u627f\\u81eaOwnable\\u5408\\u7ea6\\uff0c\\u5b9e\\u73b0\\u4e86\\u4e00\\u4e2a\\u7b80\\u5355\\u7684\\u5b58\\u50a8\\u548c\\u68c0\\u7d22\\u503c\\u7684\\u529f\\u80fd\\u3002 \\u8fd9\\u4e2a\\u5408\\u7ea6\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e2a\\u53ea\\u5141\\u8bb8\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u4fee\\u6539\\u7684\\u503c\\u7684\\u5b58\\u50a8\\u7a7a\\u95f4\\u3002\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"retrieve()\":{\"details\":\"\\u68c0\\u7d22\\u5e76\\u8fd4\\u56de\\u5f53\\u524d\\u6700\\u65b0\\u5b58\\u50a8\\u7684\\u503c\\u3002\"},\"store(uint256)\":{\"details\":\"\\u5b58\\u50a8\\u65b0\\u503c\\u5230value\\u53d8\\u91cf\\uff0c\\u5e76\\u89e6\\u53d1ValueChanged\\u4e8b\\u4ef6\\u3002 \\u53ea\\u6709\\u5408\\u7ea6\\u7684\\u6240\\u6709\\u8005\\u53ef\\u4ee5\\u8c03\\u7528\\u6b64\\u51fd\\u6570\\u3002\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Box.sol\":\"Box\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/Box.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// \\u5bfc\\u5165OpenZeppelin\\u7684Ownable\\u5408\\u7ea6\\uff0c\\u7528\\u4e8e\\u8bbf\\u95ee\\u63a7\\u5236\\n\\n/**\\n * @dev Box\\u5408\\u7ea6\\u7ee7\\u627f\\u81eaOwnable\\u5408\\u7ea6\\uff0c\\u5b9e\\u73b0\\u4e86\\u4e00\\u4e2a\\u7b80\\u5355\\u7684\\u5b58\\u50a8\\u548c\\u68c0\\u7d22\\u503c\\u7684\\u529f\\u80fd\\u3002\\n * \\u8fd9\\u4e2a\\u5408\\u7ea6\\u63d0\\u4f9b\\u4e86\\u4e00\\u4e2a\\u53ea\\u5141\\u8bb8\\u5408\\u7ea6\\u6240\\u6709\\u8005\\u4fee\\u6539\\u7684\\u503c\\u7684\\u5b58\\u50a8\\u7a7a\\u95f4\\u3002\\n */\\ncontract Box is Ownable {\\n    uint256 private value; // \\u5b9a\\u4e49\\u4e00\\u4e2a\\u79c1\\u6709\\u72b6\\u6001\\u53d8\\u91cfvalue\\uff0c\\u7528\\u4e8e\\u5b58\\u50a8\\u6570\\u503c\\n    event ValueChanged(uint256 newValue); // \\u5b9a\\u4e49\\u4e00\\u4e2a\\u4e8b\\u4ef6\\uff0c\\u5728\\u503c\\u66f4\\u65b0\\u65f6\\u89e6\\u53d1\\n\\n    constructor(address initialOwner) Ownable(initialOwner) {}\\n\\n    /**\\n     * @dev \\u5b58\\u50a8\\u65b0\\u503c\\u5230value\\u53d8\\u91cf\\uff0c\\u5e76\\u89e6\\u53d1ValueChanged\\u4e8b\\u4ef6\\u3002\\n     * \\u53ea\\u6709\\u5408\\u7ea6\\u7684\\u6240\\u6709\\u8005\\u53ef\\u4ee5\\u8c03\\u7528\\u6b64\\u51fd\\u6570\\u3002\\n     */\\n    function store(uint256 newValue) public onlyOwner {\\n        value = newValue; // \\u8bbe\\u7f6evalue\\u4e3a\\u4f20\\u5165\\u7684\\u65b0\\u503c\\n        emit ValueChanged(newValue); // \\u89e6\\u53d1ValueChanged\\u4e8b\\u4ef6\\uff0c\\u8bb0\\u5f55\\u65b0\\u503c\\n    }\\n\\n    /**\\n     * @dev \\u68c0\\u7d22\\u5e76\\u8fd4\\u56de\\u5f53\\u524d\\u6700\\u65b0\\u5b58\\u50a8\\u7684\\u503c\\u3002\\n     */\\n    function retrieve() public view returns (uint256) {\\n        return value; // \\u8fd4\\u56de\\u5f53\\u524d\\u5b58\\u50a8\\u7684\\u503c\\n    }\\n}\\n\",\"keccak256\":\"0xb5ed68f4dc441cbcb2f81ec9ac93ff9ddca30c504455324471cac7065413765f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161035038038061035083398101604081905261002f916100be565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161006e565b50506100ee565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d057600080fd5b81516001600160a01b03811681146100e757600080fd5b9392505050565b610253806100fd6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d14610072578063715018a6146100875780638da5cb5b1461008f578063f2fde38b146100aa575b600080fd5b6001546040519081526020015b60405180910390f35b6100856100803660046101d4565b6100bd565b005b610085610100565b6000546040516001600160a01b039091168152602001610069565b6100856100b83660046101ed565b610114565b6100c5610157565b60018190556040518181527f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c599060200160405180910390a150565b610108610157565b6101126000610184565b565b61011c610157565b6001600160a01b03811661014b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61015481610184565b50565b6000546001600160a01b031633146101125760405163118cdaa760e01b8152336004820152602401610142565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156101e657600080fd5b5035919050565b6000602082840312156101ff57600080fd5b81356001600160a01b038116811461021657600080fd5b939250505056fea2646970667358221220a5908f3b34ba360923377b4210ee6c5002bd11b9f16e2c50a67fac3927e0427564736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d14610072578063715018a6146100875780638da5cb5b1461008f578063f2fde38b146100aa575b600080fd5b6001546040519081526020015b60405180910390f35b6100856100803660046101d4565b6100bd565b005b610085610100565b6000546040516001600160a01b039091168152602001610069565b6100856100b83660046101ed565b610114565b6100c5610157565b60018190556040518181527f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c599060200160405180910390a150565b610108610157565b6101126000610184565b565b61011c610157565b6001600160a01b03811661014b57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61015481610184565b50565b6000546001600160a01b031633146101125760405163118cdaa760e01b8152336004820152602401610142565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156101e657600080fd5b5035919050565b6000602082840312156101ff57600080fd5b81356001600160a01b038116811461021657600080fd5b939250505056fea2646970667358221220a5908f3b34ba360923377b4210ee6c5002bd11b9f16e2c50a67fac3927e0427564736f6c63430008180033",
  "devdoc": {
    "details": "Box合约继承自Ownable合约，实现了一个简单的存储和检索值的功能。 这个合约提供了一个只允许合约所有者修改的值的存储空间。",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "retrieve()": {
        "details": "检索并返回当前最新存储的值。"
      },
      "store(uint256)": {
        "details": "存储新值到value变量，并触发ValueChanged事件。 只有合约的所有者可以调用此函数。"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Box.sol:Box",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 185,
        "contract": "contracts/Box.sol:Box",
        "label": "value",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}